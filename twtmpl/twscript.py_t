{#-
Template example

:basename: list
:category_title_form: "List"
:command_module: lists
:endpoints: ["GET lists/members/create_all", ...]
-#}
{%- macro remove_category(endpoint) -%}
{%- if endpoint.find('/') != -1 -%}
{{ endpoint[endpoint.find('/') + 1:] }}
{%- endif -%}
{%- endmacro -%}

{%- macro sanitize(endpoint) -%}
{{ endpoint.replace('/', '_').replace(':', '') }}
{%- endmacro -%}

{%- set basename = 'tw' + basename -%}
{%- set manager_class_name = 'Twitter' + category_title_form  + 'Manager' -%}
#!/usr/bin/env python
# -*- coding: utf-8 -*-

description = "A utility script to call {{ command_module }}/xxx of Twitter API."

usage = """
  {{ basename }}.py [--version] [--help]
{%- for i in endpoints %}
{%- set name = i.split(' ')[1] %}
  {{ basename }}.py {{ name }} ARGS...
{%- endfor %}
"""

from twmods import AbstractTwitterManager
from twmods import (epilog, output, request_decorator)
from twmods.commands.{{ command_module }} import make_commands
from argparse import ArgumentParser

__doc__ = '\n'.join((description, usage, epilog))
__version__ = '1.0.0'

class {{ manager_class_name }}(AbstractTwitterManager):
    """This class handles {{ command_module }}/xxx endpoints of Twitter API."""

    def __init__(self):
        super().__init__('{{ basename }}', make_commands(self))

    def make_parser(self):
        """Create the command line parser.

        Returns:
            An instance of argparse.ArgumentParser that will store the command line
            parameters.
        """

        parser = ArgumentParser(
            description=description, epilog=epilog, usage=usage)
        parser.add_argument(
            '--version',
            action='version',
            version=__version__)
        return parser
{% for i in endpoints %}
{%- set name = i.split(' ')[1] -%}
{%- set name_sanitized = sanitize(remove_category(name)) -%}
{%- set mgr_method_name = 'request_' + sanitize(name) %}
    @request_decorator
    def {{ mgr_method_name }}(self):
        """Request {{ i }} for Twitter."""

        request, args = self.tw.{{ name|replace('/', '.')|replace(':', '_') }}, vars(self.args)
        #kwargs = {k:args[k] for k in (
        #    'param1', 'param2',)
        #        if (k in args) and (args[k] is not None)}
        return kwargs, request
{% endfor %}
def main(command_line=None):
    """The main function.

    Args:
        command_line: Raw command line arguments.
    """

    mgr = {{ manager_class_name }}()
    mgr.setup(command_line)
    mgr.execute()

if __name__ == '__main__':
    main()
