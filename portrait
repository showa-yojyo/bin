#!/usr/bin/env python

"""
Make landscape images portrait by using PIL (asyncio version)
"""

from __future__ import annotations
import asyncio
import logging
import pathlib
import sys
from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from collections.abc import Iterable, Sequence

import click
from PIL import Image


__version__ = "1.3"
logger = logging.getLogger(__name__)


async def generate_images(
    queue: asyncio.Queue,
    filename: Iterable[pathlib.Path],
) -> None:
    """Producer coroutine"""

    for f in filename:
        await queue.put(f)

    logger.info("All task requests sent")


async def rotate_image(queue: asyncio.Queue) -> None:
    """Consumer coroutine"""

    while True:
        filename: str = await queue.get()
        logger.info(f"Working on {filename}")
        try:
            image = Image.open(filename)
            if image.width <= image.height:
                # already portrait
                logger.info(f"Skip {filename}")
                continue

            image_new = image.rotate(-90, expand=True)
            logger.info(f"Saving {filename}")
            image_new.save(filename)
        except Exception as e:
            # PIL.UnidentifiedImageError: The image cannot be opened and identified.
            # ValueError: The output format could not be determined from the file name.
            # OSError: The file may have been created, and may contain partial data.
            logger.warning(f"Warning: {e}")
        finally:
            queue.task_done()


async def terminate_consumers(consumers: Iterable[asyncio.Task]) -> None:
    """Clean up consumers"""

    for consumer in consumers:
        consumer.cancel()

    await asyncio.gather(*consumers, return_exceptions=True)


async def amain(filename: Sequence[pathlib.Path], num_consumers: int) -> None:
    # Producer/consumer pattern
    queue: asyncio.Queue = asyncio.Queue()

    # turn on the rotate_image thread
    consumers = [asyncio.create_task(rotate_image(queue)) for _ in range(num_consumers)]
    await generate_images(queue, filename)

    # block until all tasks are done
    await queue.join()
    logger.info("All work completed")

    await terminate_consumers(consumers)


@click.command()
@click.argument(
    "filename",
    nargs=-1,
    type=click.Path(
        exists=True,
        path_type=pathlib.Path,
    ),
)
@click.help_option(
    help="display this message and exit",
)
@click.version_option(
    __version__,
    help="output version information and exit",
)
@click.option(
    "-v",
    "--verbose",
    is_flag=True,
    default=False,
    help="output a diagnostic for every file processed",
)
@click.option(
    "-n",
    "--num-consumers",
    type=int,
    default=3,
    help="the number of consumers",
)
def main(
    filename: Sequence[pathlib.Path],
    num_consumers: int,
    verbose: bool,
) -> None:
    """Make landscape images portrait."""

    logger.addHandler(logging.StreamHandler(sys.stderr))
    if verbose:
        logger.setLevel(logging.DEBUG)
    asyncio.run(amain(filename, num_consumers))


if __name__ == "__main__":
    main()
