#!/usr/bin/env python

from __future__ import annotations
from hashlib import md5
from os import remove, rename
import pathlib
from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from typing import Iterable

import click


def newname(data: bytes, path: pathlib.Path) -> pathlib.Path:
    """Rename a file based on its hash value."""
    return path.parent / f"{md5(data).hexdigest()}{path.suffix}"


@click.command()
@click.argument(
    "paths",
    nargs=-1,
    type=click.Path(exists=True, path_type=pathlib.Path),
)
@click.help_option(help="Print this message and exit.")
@click.option(
    "-n",
    "--dry-run",
    is_flag=True,
    help="Don't actually rename; just print them.",
)
def main(paths: Iterable[pathlib.Path], dry_run: bool) -> None:
    """Rename files to their hash values."""

    for old_path in paths:
        with old_path.open(mode="rb") as input:
            data = input.read()
        try:
            if dry_run:
                click.echo(f"{old_path} => {newname(data, old_path)}")
            else:
                rename(old_path, newname(data, old_path))
        except FileExistsError:
            if dry_run:
                click.echo(f"remove({old_path})")
            else:
                remove(old_path)


if __name__ == "__main__":
    main()
