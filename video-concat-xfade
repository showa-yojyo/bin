#!/usr/bin/env python

# Reference:
# A video concatenation tool based on FFMPEG with crossfade between the segments
# (with the `xfade` filter) Â· GitHub
# <https://gist.github.com/royshil/369e175960718b5a03e40f279b131788>
from __future__ import annotations

import itertools
import pathlib
import subprocess
from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from collections.abc import Iterable, Sequence

import click

__version__ = "1.13.0"

# TODO: Make these constants below configurable via command line arguments,
# configuration files, environment variables, etc.

FFMPEG_PATH = "ffmpeg"
FFPROBE_PATH = "ffprobe"

OVERLAY_IMAGE_PATH = "./title.png"
OVERLAY_OPACITY = 1.0

CONCAT_AUDIO_PATH = "./audio-only.m4a"
CONCAT_VIDEO_PATH = "./video-only.mp4"
COMMAND_AUDIO_PATH = "./audio-command.sh"
COMMAND_VIDEO_PATH = "./video-command.sh"

XFADE_DURATION = 1.0
ACROSSFADE_DURATION = XFADE_DURATION

AUDIO_NORMALIZE = "aresample=async=1:first_pts=0,asetpts=PTS,asettb=AVTB,apad"
AUDIO_REDUCE_NOISE = "highpass=f=200,lowpass=f=3000"

@click.command()
@click.argument(
    "source",
    type=click.Path(exists=True, path_type=pathlib.Path),
    nargs=-1,
    metavar="source",
)
@click.help_option(help="show this message and exit")
@click.version_option(__version__, help="show the version and exit")
@click.option(
    "-f",
    "--segments-file",
    metavar="file",
    type=click.Path(exists=True, path_type=pathlib.Path),
    nargs=1,
    help='segments text file for concatenating. e.g. "segments.txt"',
)
@click.option(
    "--concat-audio-path",
    type=click.Path(writable=True, path_type=pathlib.Path),
    default=CONCAT_AUDIO_PATH,
    show_default=True,
    help="path to output audio-only file",
)
@click.option(
    "--concat-video-path",
    type=click.Path(writable=True, path_type=pathlib.Path),
    default=CONCAT_VIDEO_PATH,
    show_default=True,
    help="path to output video-only file",
)
@click.option(
    "--command-audio-path",
    type=click.Path(writable=True, path_type=pathlib.Path),
    default=COMMAND_AUDIO_PATH,
    show_default=True,
    help="path to output script file to concat audio files",
)
@click.option(
    "--command-video-path",
    type=click.Path(writable=True, path_type=pathlib.Path),
    default=COMMAND_VIDEO_PATH,
    show_default=True,
    help="path to output script file to concat video files",
)
@click.option(
    "--overlay-image-path",
    type=click.Path(exists=True, path_type=pathlib.Path),
    default=OVERLAY_IMAGE_PATH,
    show_default=True,
    help="path to overlaying image file",
)
@click.option(
    "--overlay-style",
    type=click.Choice(
        (
            "hardlight",
            "hardoverlay",
            "overlay",
            "screen",
            "softlight",
        ),
        case_sensitive=False,
    ),
    default="overlay",
    help='default="overlay"',
)
def main(
    source: Sequence[pathlib.Path],
    segments_file: pathlib.Path,
    concat_audio_path: pathlib.Path,
    concat_video_path: pathlib.Path,
    command_audio_path: pathlib.Path,
    command_video_path: pathlib.Path,
    overlay_image_path: pathlib.Path,
    overlay_style: str,
) -> None:
    """Concatenate videos with FFMPEG, add "xfade" between segments."""

    segments = source
    if segments_file:
        with segments_file.open("r") as fp:
            # cut the `file '` prefix and `'` postfix
            segments = [
                pathlib.Path(line[6:-2])
                for line in fp.readlines()
                if len(line.strip()) > 0 and line[0] != "#"
            ]

    # Get the lengths of the videos in seconds
    file_lengths = [
        float(
            subprocess.run(
                [
                    FFPROBE_PATH,
                    "-v",
                    "error",
                    "-show_entries",
                    "format=duration",
                    "-of",
                    "default=noprint_wrappers=1:nokey=1",
                    f.as_posix(),
                ],
                capture_output=True,
            ).stdout.splitlines()[0]
        )
        for f in segments
    ]

    # Audio normalizer
    audio_normalizer = "\n"
    for i, d in enumerate(file_lengths):
        audio_normalizer += f"[{i}:a]{AUDIO_NORMALIZE},atrim=0:{d}[a{i}];\n"

    # Audio fading
    audio_fades = ""
    last_audio_output = "a0"
    for i, _ in enumerate(segments[1:]):
        # x01, x12, ...
        next_audio_output = f"a{i}-{i + 1}"
        audio_fades += f"[{last_audio_output}][a{i + 1}]acrossfade=d={ACROSSFADE_DURATION}:o=1:c1=tri:c2=tri[{next_audio_output}];\n"
        last_audio_output = next_audio_output

    # Video normalizer
    video_normalizer = "\n"
    for i, _ in enumerate(segments):
        video_normalizer += f"[{i}:v]setpts=PTS,settb=AVTB,fps=60[v{i}];\n"

    i_overlay = len(segments)
    video_normalizer += f"[{i_overlay}:v]setpts=PTS-STARTPTS[v{i_overlay}];\n"

    video_fades = ""
    last_fade_output = "v0"
    video_length: float = 0
    # Video fading
    for i, _ in enumerate(segments[1:]):
        # Video graph: chain the xfade operator together
        video_length += file_lengths[i] - XFADE_DURATION
        next_fade_output = f"v{i}-{i + 1}"
        video_fades += f"[{last_fade_output}][v{i + 1}]xfade=duration={XFADE_DURATION}:offset={video_length:.4f}[{next_fade_output}];\n"
        last_fade_output = next_fade_output

    # final fade out
    video_length += file_lengths[-1] - XFADE_DURATION

    # overlay a still image (e.g. -i title.png)
    video_fades += f"[{last_fade_output}]fade=t=out:st={video_length:.4f}:d={XFADE_DURATION}[vv];\n"
    match overlay_style:
        case "overlay":
            video_fades += f"[v{i_overlay}]format=argb,colorchannelmixer=aa={OVERLAY_OPACITY}[z];\n"
            video_fades += f"[vv][z]overlay"
        case _:
            video_fades += f"[vv][v{i_overlay}]blend=all_mode={overlay_style}"

    # Assemble the FFMPEG command arguments

    # File inputs from the list
    files_input = [["-i", f.as_posix()] for f in segments]

    # Audio
    audio_fades += f"[{last_audio_output}]afade=t=out:st={video_length:.4f}:d={ACROSSFADE_DURATION}"
    command = [
        FFMPEG_PATH,
        "-y",
        *itertools.chain(*files_input),
        "-filter_complex",
        f'"{audio_normalizer}{audio_fades},{AUDIO_REDUCE_NOISE}"',
        "-vn",
        "-c:a",
        "aac",
        "-ar",
        "44100",
        "-ac",
        "2",
        concat_audio_path.as_posix(),
    ]
    write_command_line(command, command_audio_path)

    # Video
    command = [
        FFMPEG_PATH,
        "-y",
        *itertools.chain(*files_input),
        "-i",
        overlay_image_path.as_posix(),
        "-filter_complex",
        f'"{video_normalizer}{video_fades}"',
        "-c:v",
        "libx264",
        "-pix_fmt",
        "yuv420p",
        "-b:v",
        "1M",
        "-minrate",
        "1M",
        "-maxrate",
        "1M",
        "-bufsize",
        "1M",
        "-an",
        concat_video_path.as_posix(),
    ]
    write_command_line(command, command_video_path)


def write_command_line(command_line: Iterable[str], path: pathlib.Path) -> None:
    """TBD"""

    with path.open("w") as fout:
        fout.write(f"{' '.join(command_line)}\n")


if __name__ == "__main__":
    main()
