#!/usr/bin/env python
"""
Usage:
$ sentoscraper.py ID1 ID2 ...
"""

from __future__ import annotations

import asyncio
import pathlib
import re
from collections import namedtuple
from typing import TYPE_CHECKING, cast

if TYPE_CHECKING:
    from collections.abc import Iterable
    from typing import Sequence

from urllib.request import urlopen

import click
from bs4 import BeautifulSoup

__version__ = "2.1.2"

SEP = "|"
URL_PATTERN = "http://www.1010.or.jp/map/item/item-cnt-{id}"


class Sento(
    namedtuple(
        "Sento",
        ["id", "name", "address", "access", "holidays", "has_laundry", "office_hours"],
    )
):
    """TODO: docstring"""

    __slots__ = ()

    def __str__(self) -> str:
        return f"{SEP.join(self[:5])}{SEP}{self.has_laundry}{SEP}{self[-1]}"


async def fetch(
    id: Iterable[str],
    sem_count: int,
    cache_dir: pathlib.Path,
) -> list[Sento]:
    """TODO: docstring"""
    semaphore = asyncio.Semaphore(sem_count)

    async def scrape_with_semaphore(i: str) -> Sento:
        async with semaphore:
            return await scrape(i, cache_dir)

    return await asyncio.gather(*[scrape_with_semaphore(i) for i in id])


def get_source_path(id: str) -> pathlib.Path:
    return pathlib.Path(URL_PATTERN.format(id=id))


def get_cache_path(url: pathlib.Path) -> pathlib.Path:
    return pathlib.Path(url.with_suffix(".html").name)


TABLE = str.maketrans("０１２３４５６７８９：−", "0123456789:-")


async def scrape(id: str, cache_dir: pathlib.Path) -> Sento:
    """TODO: docstring"""

    url = get_source_path(id)
    localpath = get_cache_path(url)
    if cache_dir:
        localpath = cache_dir / localpath

    try:
        with localpath.open(mode="rb") as fin:
            data = fin.read()
    except (IOError, FileNotFoundError):
        with urlopen(str(url)) as fin:
            data = fin.read()
        with localpath.open(mode="wb") as fout:
            fout.write(data)

    def sanitize(text: str) -> str:
        return re.sub(r"\s+", "", text.strip()).translate(TABLE)

    def process_address(text: str) -> str:
        """Remove area code from given address"""
        return sanitize(text[9:])

    bs = BeautifulSoup(data, "lxml")

    def get_name_from_heading() -> str:
        if heading := bs.find("h2"):
            return cast(str, heading.text)
        raise ValueError

    def has_laundry() -> bool:
        return bool(bs.find("a", string="コインランドリー"))

    def get_column_value(propname: str) -> str:
        if not (tag := bs.find(string=propname)):
            raise ValueError
        if not (column := tag.find_next("td")):
            raise ValueError
        return cast(str, column.text)

    return Sento(
        id=id,
        name=get_name_from_heading(),
        has_laundry=1 if has_laundry() else 0,
        address=process_address(get_column_value("住所")),
        access=sanitize(get_column_value("アクセス")),
        holidays=sanitize(get_column_value("休日")),
        office_hours=sanitize(get_column_value("営業時間")),
    )


@click.command()
@click.argument("id", nargs=-1)
@click.help_option(help="show this message and exit")
@click.version_option(__version__, help="show the version and exit")
@click.option(
    "-s",
    "--semaphore",
    type=int,
    default=3,
    help="the number of the semaphore",
)
@click.option(
    "-c",
    "--cache-dir",
    type=click.Path(
        exists=True,
        readable=True,
        writable=True,
        dir_okay=True,
        path_type=pathlib.Path,
    ),
    help="directory in which cache files are stored",
)
def main(id: Sequence[str], semaphore: int, cache_dir: pathlib.Path) -> None:
    """Given sento identifiers, show their simple information.

    \b
    Example:
    $ sentoscraper.py $(seq 590 592)
    590|さくら湯 [板橋区]|板橋区板橋3-39-12|都営三田線「板橋区役所前」駅下車、徒歩5分|月曜、木曜|0|15:30-21:00
    591|金松湯 [板橋区]|板橋区大山東町55-3|東武東上線「大山」駅下車、徒歩2分|火曜|0|15:30-23:30
    592|第二富士見湯 [板橋区]|板橋区幸町20-5|東武東上線「大山」駅下車、徒歩7分|土曜|0|16:00-24:00日曜、 祝日は15時から営業
    """

    results = asyncio.run(fetch(id, semaphore, cache_dir))
    for i in sorted(results):
        click.echo(i)


if __name__ == "__main__":
    main()
