#!/usr/bin/env python

# Reference:
# A video concatenation tool based on FFMPEG with crossfade between the segments
# (with the `xfade` filter) Â· GitHub
# <https://gist.github.com/royshil/369e175960718b5a03e40f279b131788>

from argparse import ArgumentParser
import subprocess
import sys
import itertools

__version__ = '1.1'

# TODO: Make these constants below configurable via command line arguments,
# configuration files, environment variables, etc.

FFMPEG_PATH = 'ffmpeg'
FFPROBE_PATH = 'ffprobe'

OVERLAY_IMAGE_PATH = './title.png'

OUTPUT_AUDIO_PATH = './audio-only.m4a'
OUTPUT_VIDEO_PATH = './video-only.mp4'

ACROSSFADE_DURATION = 0.75
XFADE_DURATION = 1.0

def parse_args(args):
    """Parse the command line parameters.

    Returns:
        An instance of argparse.ArgumentParser that stores the command line
        parameters.
    """

    parser = ArgumentParser(description='Concatenate videos with FFMPEG, add "xfade" between segments.')
    parser.add_argument(
        '--version', action='version', version=__version__)
    parser.add_argument(
        '--segments_file', '-f',
        metavar='Segments file',
        type=str,
        nargs=1,
        help='Segments text file for concatenating. e.g. "segments.txt"')
    parser.add_argument(
        '--output', '-o',
        dest='output_filename',
        type=str,
        default='out.mp4',
        help='output filename to provide to ffmpeg. default="out.mp4"')
    parser.add_argument(
        'segments',
        nargs='+')

    return parser.parse_args(args or ["--help"])

def run(args):
    """The main function"""

    if args.segments_file:
        with open(args.segments_file[0], 'r') as seg_file:
            # cut the `file '` prefix and `'` postfix
            segments = [line[6:-2] for line in seg_file.readlines()
                if len(line.strip()) > 0 and line[0] != "#"]
    else:
        segments = args.segments

    # Get the lengths of the videos in seconds
    file_lengths = [
        float(subprocess.run(
            [FFPROBE_PATH,
            '-v', 'error',
            '-show_entries', 'format=duration',
            '-of', 'default=noprint_wrappers=1:nokey=1',
            f],
            capture_output=True).stdout.splitlines()[0])
        for f in segments
    ]

    # File inputs from the list
    files_input = [['-i', f] for f in segments]

    # Audio normalizer
    audio_normalizer = "\n"
    for i, _ in enumerate(segments):
        audio_normalizer += f"[{i}:a]asetpts=PTS,asettb=AVTB[a{i}];\n"

    # Audio fading
    audio_fades = ""
    last_audio_output = "a0"
    for i, _ in enumerate(segments[1:]):
        # x01, x12, ...
        next_audio_output = f"x{i}{i + 1}"
        audio_fades += f"[{last_audio_output}][a{i + 1}]acrossfade=d={ACROSSFADE_DURATION}:o=1:c1=tri:c2=tri[{next_audio_output}];\n"
        last_audio_output = next_audio_output

    # Add anull filter to adjust stream specifier.
    audio_fades += f"[{last_audio_output}]anull"

    # Video normalizer
    video_normalizer = "\n"
    for i, _ in enumerate(segments):
        video_normalizer += f"[{i}:v]setpts=PTS,settb=AVTB,fps=30[v{i}];\n"

    video_fades = ""
    last_fade_output = "v0"
    video_length = 0
    # Video fading
    for i, _ in enumerate(segments[1:]):
        # Video graph: chain the xfade operator together
        video_length += file_lengths[i] - XFADE_DURATION
        next_fade_output = "v%d%d" % (i, i + 1)
        video_fades += f"[{last_fade_output}][v{i + 1}]xfade=duration={XFADE_DURATION}:offset={video_length:.4f}[{next_fade_output}];\n"
        last_fade_output = next_fade_output

    # final fade out
    video_length += file_lengths[-1] - XFADE_DURATION

    # overlay a still image (e.g. -i title.png)
    video_fades += f"[{last_fade_output}]fade=t=out:st={video_length}:d={XFADE_DURATION}[vv];\n[vv][{len(segments)}:v]overlay"

    # Assemble the FFMPEG command arguments

    # Audio
    command = [
        FFMPEG_PATH,
        '-y',
        *itertools.chain(*files_input),
        '-filter_complex', '"' + audio_normalizer + audio_fades + '"',
        '-vn',
        OUTPUT_AUDIO_PATH,]

    print(" ".join(command))
    print()
    # Run FFMPEG
    ##subprocess.run(command)

    # Video
    command = [
        FFMPEG_PATH,
        '-y',
        *itertools.chain(*files_input),
        '-i', OVERLAY_IMAGE_PATH,
        '-filter_complex', '"' + video_normalizer + video_fades + '"',
        '-pix_fmt', 'yuv420p', '-an',
        OUTPUT_VIDEO_PATH,]

    print(" ".join(command))
    print()
    # Run FFMPEG
    ##subprocess.run(command)

    # Final command

    command = [
        FFMPEG_PATH, '-i', OUTPUT_VIDEO_PATH,
        '-i', OUTPUT_AUDIO_PATH,
        '-map', '0:v', '-map', '1:a',
        '-c:v', 'libx264', '-pix_fmt', 'yuv420p', '-strict', '-2',
        '-c:a', 'aac',
        '-vb', '1024k',
        '-minrate', '1024k',
        '-maxrate', '1024k',
        '-bufsize', '1024k',
        '-ar', '44100',
        '-ac', '2',
        '-r', '30',
        args.output_filename,]
    print(" ".join(command))

    # Run FFMPEG
    ##subprocess.run(command)

def main(args=sys.argv[1:]):
    sys.exit(run(parse_args(args)))

if __name__ == '__main__':
    main()
