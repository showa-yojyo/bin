{#-
Template arguments example

:basename: list
:category_title_form: "List"
:command_module: lists
:endpoints: ["GET lists/members/create_all", ...]
-#}
{%- set base_class_name = 'AbstractTwitter' + category_title_form  + 'Command' -%}

{%- macro remove_category(endpoint) -%}
{%- if endpoint.find('/') != -1 -%}
{{ endpoint[endpoint.find('/') + 1:] }}
{%- endif -%}
{%- endmacro -%}

{%- macro sanitize(endpoint) -%}
{{ endpoint.replace('/', '_').replace(':', '') }}
{%- endmacro -%}

{%- macro make_macro_name(sanitized) -%}
{%- if sanitized -%}
{{ basename.upper() + '_' + sanitized.upper() }}
{%- else -%}
{{ basename.upper()}}
{%- endif -%}

{%- endmacro -%}
# -*- coding: utf-8 -*-
"""{{ command_module }}.py: Implementation of class {{ base_class_name }}
and its subclasses.
"""

from .. import AbstractTwitterCommand
from .. import cache
from argparse import ArgumentParser

{% for i in endpoints -%}
# {{ i }}
{% endfor %}
{% for i in endpoints -%}
{%- set name = i.split(' ')[1] -%}
{%- set name_sanitized = sanitize(remove_category(name)) -%}
{%- set macro_name = make_macro_name(name_sanitized) -%}
{{ macro_name }} = ('{{ name }}',)
{% endfor %}
class {{ base_class_name }}(AbstractTwitterCommand):
    pass
{% for i in endpoints %}
{%- set name = i.split(' ')[1] -%}
{%- set name_sanitized = sanitize(remove_category(name)) -%}
{%- set mgr_method_name = 'request_' + sanitize(name) -%}
{%- set macro_name = make_macro_name(name_sanitized) -%}
{%- set subclass_name = 'Command' + name_sanitized.title().replace('_', '') %}
class {{ subclass_name }}({{ base_class_name }}):
    """xxx"""

    def create_parser(self, subparsers):
        parser = subparsers.add_parser(
            {{ macro_name }}[0],
            aliases={{ macro_name }}[1:],
            #parents=[],
            help=self.__doc__)
        return parser

    def __call__(self):
        self.manager.{{ mgr_method_name }}()
{% endfor %}
def make_commands(manager):
    """Prototype"""
    return (cmd_t(manager) for cmd_t in {{ base_class_name }}.__subclasses__())
