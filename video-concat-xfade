#!/usr/bin/env python

# Reference:
# A video concatenation tool based on FFMPEG with crossfade between the segments
# (with the `xfade` filter) Â· GitHub
# <https://gist.github.com/royshil/369e175960718b5a03e40f279b131788>

from argparse import ArgumentParser, Namespace
import itertools
import subprocess
import sys
from typing import Iterable, Never, Sequence

__version__ = '1.8.1'

# TODO: Make these constants below configurable via command line arguments,
# configuration files, environment variables, etc.

FFMPEG_PATH = 'ffmpeg'
FFPROBE_PATH = 'ffprobe'

OVERLAY_IMAGE_PATH = './title.png'

CONCAT_AUDIO_PATH = './audio-only.m4a'
CONCAT_VIDEO_PATH = './video-only.mp4'
COMMAND_AUDIO_PATH = './audio-command.sh'
COMMAND_VIDEO_PATH = './video-command.sh'

XFADE_DURATION = 1.0
ACROSSFADE_DURATION = XFADE_DURATION

AUDIO_NORMALIZE = 'aresample=async=1:first_pts=0,asetpts=PTS,asettb=AVTB,apad'
AUDIO_REDUCE_NOISE = 'highpass=f=200,lowpass=f=3000'

def parse_args(args: Sequence[str]) -> Namespace:
    """Parse the command line parameters.

    Returns:
        An instance of argparse.ArgumentParser that stores the command line
        parameters.
    """

    parser = ArgumentParser(description='Concatenate videos with FFMPEG, add "xfade" between segments.')
    parser.add_argument(
        '--version', action='version', version=__version__)
    parser.add_argument(
        '--segments_file', '-f',
        metavar='Segments file',
        type=str,
        nargs=1,
        help='Segments text file for concatenating. e.g. "segments.txt"')
    parser.add_argument(
        '--output', '-o',
        dest='output_filename',
        type=str,
        default='out.mp4',
        help='output filename to provide to ffmpeg. default="out.mp4"')
    parser.add_argument(
        '--concat-audio-path',
        dest='concat_audio_path',
        type=str,
        default=CONCAT_AUDIO_PATH,
        help=f'default="{CONCAT_AUDIO_PATH}"')
    parser.add_argument(
        '--concat-video-path',
        dest='concat_video_path',
        type=str,
        default=CONCAT_VIDEO_PATH,
        help=f'default="{CONCAT_VIDEO_PATH}"')
    parser.add_argument(
        '--command-audio-path',
        dest='command_audio_path',
        type=str,
        default=COMMAND_AUDIO_PATH,
        help=f'default="{COMMAND_AUDIO_PATH}"')
    parser.add_argument(
        '--command-video-path',
        dest='command_video_path',
        type=str,
        default=COMMAND_VIDEO_PATH,
        help=f'default="{COMMAND_VIDEO_PATH}"')
    parser.add_argument(
        '--overlay-image-path',
        dest='overlay_path',
        type=str,
        default=OVERLAY_IMAGE_PATH,
        help=f'default="{OVERLAY_IMAGE_PATH}"')
    parser.add_argument(
        'segments',
        nargs='+')

    return parser.parse_args(args or ["--help"])

def run(args: Namespace):
    """The main function"""

    if args.segments_file:
        with open(args.segments_file[0], 'r') as seg_file:
            # cut the `file '` prefix and `'` postfix
            segments = [line[6:-2] for line in seg_file.readlines()
                if len(line.strip()) > 0 and line[0] != "#"]
    else:
        segments = args.segments

    # Get the lengths of the videos in seconds
    file_lengths = [
        float(subprocess.run(
            [FFPROBE_PATH,
            '-v', 'error',
            '-show_entries', 'format=duration',
            '-of', 'default=noprint_wrappers=1:nokey=1',
            f],
            capture_output=True).stdout.splitlines()[0])
        for f in segments
    ]

    # Audio normalizer
    audio_normalizer = "\n"
    for i, d in enumerate(file_lengths):
        audio_normalizer += f"[{i}:a]{AUDIO_NORMALIZE},atrim=0:{d}[a{i}];\n"

    # Audio fading
    audio_fades = ""
    last_audio_output = "a0"
    for i, _ in enumerate(segments[1:]):
        # x01, x12, ...
        next_audio_output = f"x{i}{i + 1}"
        audio_fades += f"[{last_audio_output}][a{i + 1}]acrossfade=d={ACROSSFADE_DURATION}:o=1:c1=tri:c2=tri[{next_audio_output}];\n"
        last_audio_output = next_audio_output

    # Video normalizer
    video_normalizer = "\n"
    for i, _ in enumerate(segments):
        video_normalizer += f"[{i}:v]setpts=PTS,settb=AVTB,fps=60[v{i}];\n"

    i_overlay = len(segments)
    video_normalizer += f"[{i_overlay}:v]setpts=PTS-STARTPTS[v{i_overlay}];\n"

    video_fades = ""
    last_fade_output = "v0"
    video_length: float = 0
    # Video fading
    for i, _ in enumerate(segments[1:]):
        # Video graph: chain the xfade operator together
        video_length += file_lengths[i] - XFADE_DURATION
        next_fade_output = "v%d%d" % (i, i + 1)
        video_fades += f"[{last_fade_output}][v{i + 1}]xfade=duration={XFADE_DURATION}:offset={video_length:.4f}[{next_fade_output}];\n"
        last_fade_output = next_fade_output

    # final fade out
    video_length += file_lengths[-1] - XFADE_DURATION

    # overlay a still image (e.g. -i title.png)
    video_fades += f"[{last_fade_output}]fade=t=out:st={video_length:.4f}:d={XFADE_DURATION}[vv];\n"
    video_fades += f"[vv][v{i_overlay}]overlay=enable='between(t,0,10)'"

    # Assemble the FFMPEG command arguments

    # File inputs from the list
    files_input = [['-i', f] for f in segments]

    # Audio
    audio_fades += f"[{last_audio_output}]afade=t=out:st={video_length:.4f}:d={ACROSSFADE_DURATION}"
    command = [
        FFMPEG_PATH,
        '-y',
        *itertools.chain(*files_input),
        '-filter_complex', f'"{audio_normalizer}{audio_fades},{AUDIO_REDUCE_NOISE}"',
        '-vn',
        '-c:a', 'aac',
        '-ar', '44100',
        '-ac', '2',
        args.concat_audio_path,]
    write_command_line(command, args.command_audio_path)

    # Video
    command = [
        FFMPEG_PATH,
        '-y',
        *itertools.chain(*files_input),
        '-i', args.overlay_path,
        '-filter_complex', f'"{video_normalizer}{video_fades}"',
        '-c:v', 'libx264',
        '-pix_fmt', 'yuv420p',
        '-b:v', '1M',
        '-minrate', '1M',
        '-maxrate', '1M',
        '-bufsize', '1M',
        '-an',
        args.concat_video_path,]
    write_command_line(command, args.command_video_path)

    # Final command

    command = [
        FFMPEG_PATH, '-y',
        '-i', args.concat_video_path,
        '-i', args.concat_audio_path,
        '-c:v', 'copy',
        '-c:a', 'aac',
        '-map', '0:v:0',
        '-map', '1:a:0',
        '-movflags', '+faststart',
        args.output_filename,]
    print(" ".join(command))

    # Run FFMPEG
    ##subprocess.run(command)

def write_command_line(command_line: Iterable[str], path: str) -> None:
    """TBD"""

    with open(path, 'w') as fout:
        print(" ".join(command_line), file=fout)
        print(file=fout)

    # Run FFMPEG
    ##subprocess.run(command_line)

def main(args: Sequence[str]=sys.argv[1:]) -> Never:
    sys.exit(run(parse_args(args)))

if __name__ == '__main__':
    main()
